import sys
import os

import torch
from dataloader import ModelNet40C
from mvtorch.data import ScanObjectNN, CustomDataLoader
from mvtorch.networks import MVNetwork
from mvtorch.view_selector import MVTN
from mvtorch.mvrenderer import MVRenderer

nb_views = 1 # Number of views generated by view selector
dset_test = ModelNet40C(data_dir='../data/modelnet40_c/', split='test',corruption = 'upsampling', severity = '5')
test_loader = CustomDataLoader(dset_test, batch_size=1, shuffle=False, drop_last=False)

mvnetwork = MVNetwork(num_classes=40, num_parts=None, mode='cls', net_name='resnet101').cuda()
optimizer = torch.optim.AdamW(mvnetwork.parameters(), lr=0.00001, weight_decay=0.03)
mvtn = MVTN(nb_views=nb_views).cuda()
mvtn_optimizer = None
mvrenderer = MVRenderer(nb_views=nb_views, return_mapping=False)


mvnetwork.load_state_dict(torch.load('mvnetwork.pth'))
mvtn.load_state_dict(torch.load('mvtn.pth'))
mvtn_optimizer = None
mvrenderer.load_state_dict(torch.load('mvrenderer.pth'))
mvnetwork.eval()
mvtn.eval()
mvrenderer.eval()
criterion = torch.nn.CrossEntropyLoss()
running_loss = 0
correct = 0.0
avgtestacc = 0.0
for i, (targets, meshes, points) in enumerate(test_loader):
    #print(targets)
    #print(meshes)
    #print(points)
    with torch.no_grad():
        azim, elev, dist = mvtn(points, c_batch_size=len(targets))
        rendered_images, _ = mvrenderer(meshes, points, azim=azim, elev=elev, dist=dist)
        outputs = mvnetwork(rendered_images)[0]
        #print(outputs)
        #print(targets)


            
        targets = torch.flatten(targets)
        #loss = criterion(outputs, targets.cuda())
        #running_loss += loss.item()
        correct += (torch.max(outputs, dim=0)[1] == targets.cuda()).to(torch.int32).sum().item()
print(f"Average Test Accuracy = {(100.0*correct / len(dset_test)):.2f}.")